{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { ProductModel } from './product-dashboard.model';\nlet ProductDashboardComponent = class ProductDashboardComponent {\n  constructor(formbuilder, api, datePipe) {\n    this.formbuilder = formbuilder;\n    this.api = api;\n    this.datePipe = datePipe;\n    this.productModelObj = new ProductModel();\n  }\n  //   // constructor(private formBuilder: FormBuilder, private datePipe: DatePipe) {\n  //   this.formValue = this.formBuilder.group({\n  //     productName: [''],\n  //     productDescription: [''],\n  //     productPrice: [''],\n  //     createdDate: [''] // Added createdDate field to the form\n  //   });\n  // }\n  ngOnInit() {\n    this.formValue = this.formbuilder.group({\n      productName: [''],\n      productDescription: [''],\n      createdDate: ['']\n    });\n    this.getAllProduct();\n  }\n  postProductDetails() {\n    this.productModelObj.productName = this.formValue.value.productName;\n    this.productModelObj.productDescription = this.formValue.value.productDescription;\n    this.productModelObj.createdDate = this.getCurrentDateTime();\n    console.log(\"this.productModelObj\", this.productModelObj);\n    this.api.postProduct(this.productModelObj).subscribe(res => {\n      console.log(res);\n      alert(\"Product Added Successfully\");\n      let ref = document.getElementById('cancel');\n      ref?.click();\n      this.formValue.reset();\n    }, err => {\n      alert(\"Something went wrong\");\n    });\n  }\n  getAllProduct() {\n    this.api.getProduct().subscribe(res => {\n      this.productData = res;\n    });\n  }\n  getCurrentDateTime() {\n    const currentDate = new Date();\n    const formattedDate = this.datePipe.transform(currentDate, 'yyyy-MM-dd HH:mm:ss');\n    console.log(\"date\");\n    if (formattedDate !== null) {\n      return formattedDate;\n    } else {\n      return 'date is invalid'; // Or any other default value\n    }\n  }\n};\n\nProductDashboardComponent = __decorate([Component({\n  selector: 'app-product-dashboard',\n  templateUrl: './product-dashboard.component.html',\n  styleUrls: ['./product-dashboard.component.css']\n})], ProductDashboardComponent);\nexport { ProductDashboardComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAGjD,SAASC,YAAY,QAAQ,2BAA2B;AAQjD,IAAMC,yBAAyB,GAA/B,MAAMA,yBAAyB;EAKtCC,YAAoBC,WAAwB,EAAUC,GAAe,EAAUC,QAAkB;IAA7E,gBAAW,GAAXF,WAAW;IAAuB,QAAG,GAAHC,GAAG;IAAsB,aAAQ,GAARC,QAAQ;IAFrF,oBAAe,GAAkB,IAAIL,YAAY,EAAE;EAE8C;EAEnG;EACE;EACA;EACA;EACA;EACA;EACA;EACA;EAIFM,QAAQ;IACR,IAAI,CAACC,SAAS,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACtCC,WAAW,EAAG,CAAC,EAAE,CAAC;MAClBC,kBAAkB,EAAG,CAAC,EAAE,CAAC;MACzBC,WAAW,EAAE,CAAC,EAAE;KACjB,CAAC;IACF,IAAI,CAACC,aAAa,EAAE;EACpB;EACAC,kBAAkB;IAChB,IAAI,CAACC,eAAe,CAACL,WAAW,GAAG,IAAI,CAACF,SAAS,CAACQ,KAAK,CAACN,WAAW;IACnE,IAAI,CAACK,eAAe,CAACJ,kBAAkB,GAAG,IAAI,CAACH,SAAS,CAACQ,KAAK,CAACL,kBAAkB;IACjF,IAAI,CAACI,eAAe,CAACH,WAAW,GAAG,IAAI,CAACK,kBAAkB,EAAE;IAC9DC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAC,IAAI,CAACJ,eAAe,CAAC;IACtD,IAAI,CAACV,GAAG,CAACe,WAAW,CAAC,IAAI,CAACL,eAAe,CAAC,CACzCM,SAAS,CAACC,GAAG,IAAE;MACdJ,OAAO,CAACC,GAAG,CAACG,GAAG,CAAC;MAChBC,KAAK,CAAC,4BAA4B,CAAC;MACnC,IAAIC,GAAG,GAAGC,QAAQ,CAACC,cAAc,CAAC,QAAQ,CAAC;MAC3CF,GAAG,EAAEG,KAAK,EAAE;MACZ,IAAI,CAACnB,SAAS,CAACoB,KAAK,EAAE;IACvB,CAAC,EACFC,GAAG,IAAE;MACHN,KAAK,CAAC,sBAAsB,CAAC;IAC/B,CAAC,CAAC;EACJ;EACAV,aAAa;IACX,IAAI,CAACR,GAAG,CAACyB,UAAU,EAAE,CACpBT,SAAS,CAACC,GAAG,IAAE;MACd,IAAI,CAACS,WAAW,GAAGT,GAAG;IACxB,CAAC,CAAC;EACJ;EACAL,kBAAkB;IAChB,MAAMe,WAAW,GAAG,IAAIC,IAAI,EAAE;IAC9B,MAAMC,aAAa,GAAG,IAAI,CAAC5B,QAAQ,CAAC6B,SAAS,CAACH,WAAW,EAAE,qBAAqB,CAAC;IACjFd,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,IAAIe,aAAa,KAAK,IAAI,EAAE;MAC1B,OAAOA,aAAa;KACrB,MAAM;MACL,OAAO,iBAAiB,CAAC,CAAC;;EAE9B;CAEC;;AA5DYhC,yBAAyB,eALrCF,SAAS,CAAC;EACToC,QAAQ,EAAE,uBAAuB;EACjCC,WAAW,EAAE,oCAAoC;EACjDC,SAAS,EAAE,CAAC,mCAAmC;CAChD,CAAC,GACWpC,yBAAyB,CA4DrC;SA5DYA,yBAAyB","names":["Component","ProductModel","ProductDashboardComponent","constructor","formbuilder","api","datePipe","ngOnInit","formValue","group","productName","productDescription","createdDate","getAllProduct","postProductDetails","productModelObj","value","getCurrentDateTime","console","log","postProduct","subscribe","res","alert","ref","document","getElementById","click","reset","err","getProduct","productData","currentDate","Date","formattedDate","transform","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Angularpoc\\AngularCRUDProducts\\src\\app\\product-dashboard\\product-dashboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ApiService } from '../shared/api.service';\nimport { ProductModel } from './product-dashboard.model';\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-product-dashboard',\n  templateUrl: './product-dashboard.component.html',\n  styleUrls: ['./product-dashboard.component.css']\n})\nexport class ProductDashboardComponent implements OnInit{\n\n  formValue !: FormGroup;\n  productModelObj : ProductModel = new ProductModel();\n  productData !: any; \nconstructor(private formbuilder: FormBuilder, private api: ApiService, private datePipe: DatePipe){}\n\n//   // constructor(private formBuilder: FormBuilder, private datePipe: DatePipe) {\n  //   this.formValue = this.formBuilder.group({\n  //     productName: [''],\n  //     productDescription: [''],\n  //     productPrice: [''],\n  //     createdDate: [''] // Added createdDate field to the form\n  //   });\n  // }\n\n\n\nngOnInit(): void{\nthis.formValue = this.formbuilder.group({\n  productName : [''],\n  productDescription : [''],\n  createdDate: [''] \n})\nthis.getAllProduct();\n}\npostProductDetails(){\n  this.productModelObj.productName = this.formValue.value.productName;\n  this.productModelObj.productDescription = this.formValue.value.productDescription;\n  this.productModelObj.createdDate = this.getCurrentDateTime();\nconsole.log(\"this.productModelObj\",this.productModelObj)\n  this.api.postProduct(this.productModelObj)\n  .subscribe(res=>{\n    console.log(res);\n    alert(\"Product Added Successfully\")\n    let ref = document.getElementById('cancel')\n    ref?.click();\n    this.formValue.reset();\n   },\n  err=>{\n    alert(\"Something went wrong\");\n  })\n}\ngetAllProduct(){\n  this.api.getProduct()\n  .subscribe(res=>{\n    this.productData = res;\n  })\n}\ngetCurrentDateTime(): string {\n  const currentDate = new Date();\n  const formattedDate = this.datePipe.transform(currentDate, 'yyyy-MM-dd HH:mm:ss');\n  console.log(\"date\")\n  if (formattedDate !== null) {\n    return formattedDate;\n  } else {\n    return 'date is invalid'; // Or any other default value\n  }\n}\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}